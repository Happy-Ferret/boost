local numbers = require("numbers")
-- custom modules!!! â‡§

-- other formats!
local yaml = require("yaml")
local json = require("json")
local xmlpath = require("xmlpath")

-- fs, regex and http!
local re = require("re")
local http = require("http")
local url = require("url")
local lfs = require("lfs")


Stackmesh.configure = function(config)

  -- fields can be set directly like this
  config.gpu_processing.enabled = true
  config.gpu_processing.device = "/dev/nvidia01"

  -- a ternary operator
  config.networks.npipe.address = (host_os == "windows" and "\\pipe" or "/tmp/stackmesh.machine.api")

  -- fields can also be set using sub-tables
  config.networks.tcp = {
    address = ":8080",
    max_conns = (10 .. 10),
    read_deadline = 120000
  }

  -- lua lets you concat strings and numbers!!!
  udp_address = ":" .. 8888

  config.networks.udp = {
    address =  udp_address,
    -- calling methods from other (custom) modules!
    read_deadline = numbers.add(100, 1)
  }

  -- boost can parse yaml!
  local str = [==[
key1: value1
key2:
  - value2
  - value3
]==]

local tb = yaml.parse(str)
print(tb.key1)    -- value1
print(tb.key2[1]) -- value2
print(tb.key2[2]) -- value3
  -- or json!
  str, err = json.encode({ name = "seth", age = 18 })
  print(str)
  -- or xml!
  xml ="<bookist><book>x1</book><book>x2</book><book>x3</book></booklist>"
  node, err = xmlpath.loadxml(xml)
  path, err = xmlpath.compile("//book")
  it = path:iter(node)
  for k,v in pairs(it) do
      print(k,v:string())
  end

  -- or make http requests!
  print(http.get("http://example.com"))
  -- or do regex
  print(re.find("the address is :3001", ":%d%d%d%d"))

  -- or even do url parsing
  parsed_url = url.parse("http://example.com/")
  print(parsed_url.host)

  -- or interact with the filesystem
  lfs.mkdir("bananas")
end
